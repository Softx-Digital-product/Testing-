// Define a cache name
const CACHE_NAME = 'my-cache';

// List of resources to cache
const urlsToCache = [
  '/',
  '/offline.html',
  // Add other resources you want to cache
];

// Install the service worker
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        return cache.addAll(urlsToCache);
      })
  );
});

// Intercept network requests
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // If the request is found in the cache, return it
        if (response) {
          return response;
        }

        // If the request is not found in the cache, fetch it
        return fetch(event.request)
          .catch(() => {
            // If fetch fails, return the offline page
            return caches.match('/offline.html');
          });
      })
  );
});







