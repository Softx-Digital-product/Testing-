
// Get the scanned product code (e.g., from a form or scanner input)
$scannedProductCode = $_POST['product_code'];

// Check if the product code exists in the database
$query = "SELECT * FROM products WHERE product_code = '$scannedProductCode'";
$result = mysqli_query($conn, $query);

// If not found, try with leading zeros
if (mysqli_num_rows($result) == 0) {
    $scannedProductCodeWithZeros = str_pad($scannedProductCode, 6, '0', STR_PAD_LEFT); // Add leading zeros
    $query = "SELECT * FROM products WHERE product_code = '$scannedProductCodeWithZeros'";
    $result = mysqli_query($conn, $query);
}

// Process the result (e.g., display product details or handle errors)
if (mysqli_num_rows($result) > 0) {
    // Product found
    $row = mysqli_fetch_assoc($result);
    // Display or process product details
} else {
    // Product not found
    // Handle the case when the product code is invalid
}


// Function to add a product
function addProduct(product) {
    // Perform some actions to add the product

    // Call the checkStock function with a callback
    return checkStock(product)
        .then((stockStatus) => {
            // Continue with further code using the stockStatus
            console.log('Product added. Stock status:', stockStatus);
        })
        .catch((error) => {
            console.error('Error:', error);
        });
}

// Function to check stock status
function checkStock(product) {
    return new Promise((resolve, reject) => {
        // Simulate an AJAX call
        setTimeout(() => {
            const stockStatus = Math.random() > 0.5 ? 'In stock' : 'Out of stock';
            resolve(stockStatus);
        }, 1000); // Simulate a delay of 1 second
    });
}

// Example usage
addProduct('Example Product');

<?php

function isIPAlive($ip, $port) {
    $timeout = 1;
    $socket = @fsockopen($ip, $port, $errno, $errstr, $timeout);
    if ($socket) {
        fclose($socket);
        return true;
    } else {
        return false;
    }
}

$startIP = "192.168.1.1";
$endIP = "192.168.1.10";
$port = 80; // HTTP port

for ($i = ip2long($startIP); $i <= ip2long($endIP); $i++) {
    $currentIP = long2ip($i);
    if (isIPAlive($currentIP, $port)) {
        echo "$currentIP is alive.<br>";
    }
}

?>

<?php

function isIPAlive($ip) {
    $output = shell_exec("ping -c 1 $ip");
    return strpos($output, "1 packets transmitted, 1 received") !== false;
}

$startIP = "192.168.1.1";
$endIP = "192.168.1.10";

for ($i = ip2long($startIP); $i <= ip2long($endIP); $i++) {
    $currentIP = long2ip($i);
    if (isIPAlive($currentIP)) {
        echo "$currentIP is alive.<br>";
    }
}

?>




// service-worker.js

const CACHE_NAME = 'my-cache-v1';

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        return cache.addAll([
          '/',
          '/index.html',
          '/styles.css',
          '/script.js',
          // Add other resources you want to cache
        ]);
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        return response || fetch(event.request);
      })
  );
});
// service-worker.js

const CACHE_NAME = 'my-cache-v1';

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        return cache.addAll([
          '/',
          '/index.html',
          '/styles.css',
          '/script.js',
          // Add other resources you want to cache
        ]);
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        return response || fetch(event.request);
      })
  );
});
// script.js

document.querySelector('#updateCacheButton').addEventListener('click', async () => {
  const cache = await caches.open(CACHE_NAME);
  const updatedResponse = await fetch('/data.json'); // Fetch the updated resource
  await cache.put('/data.json', updatedResponse);    // Update the cache with the new data
});

